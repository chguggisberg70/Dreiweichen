name: Android CI (APK + AAB)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: android-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_DISTRIBUTION: temurin
      JAVA_VERSION: '21'
      ANDROID_API: '34'        # falls du auf 36 gehst, hier auch 36 eintragen
      BUILD_TOOLS: '34.0.0'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API }}
          build-tools: ${{ env.BUILD_TOOLS }}

      # neue, empfohlene Gradle-Action (ersetzt die alte gradle-build-action)
      - name: Setup Gradle (cache & config)
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Print versions
        run: |
          ./gradlew -v
          java -version

      - name: Lint (optional)
        run: ./gradlew lint
        continue-on-error: true

      # >>> baut Debug-APK und Release-AAB
      - name: Build Debug APK + Release AAB
        run: ./gradlew assembleDebug bundleRelease --stacktrace

      # ---------- optional: Release-Bundle signieren ----------
      # Secrets (Repo → Settings → Secrets and variables → Actions):
      # ANDROID_KEYSTORE_B64, ANDROID_KEY_ALIAS, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_PASSWORD
      - name: Decode keystore (optional)
        shell: bash
        run: |
          if [[ -n "${{ secrets.ANDROID_KEYSTORE_B64 }}" ]]; then
            echo "${{ secrets.ANDROID_KEYSTORE_B64 }}" | base64 -d > keystore.jks
            echo "Keystore decoded."
          else
            echo "No ANDROID_KEYSTORE_B64 secret set. Skipping signing."
          fi

      - name: Sign AAB (optional)
        if: ${{ secrets.ANDROID_KEYSTORE_B64 != '' }}
        shell: bash
        env:
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          STOREPASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEYPASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          AAB=$(ls app/build/outputs/bundle/release/*.aab | head -n 1)
          if [[ -z "$AAB" ]]; then
            echo "No AAB found"; exit 1
          fi
          # AAB wird mit jarsigner signiert (zipalign ist bei AAB nicht nötig)
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore keystore.jks -storepass "$STOREPASS" -keypass "$KEYPASS" \
            "$AAB" "$KEY_ALIAS"
          cp "$AAB" app/build/outputs/bundle/release/app-release-signed.aab
          jarsigner -verify -verbose -certs app/build/outputs/bundle/release/app-release-signed.aab

      # ---------- Artefakte hochladen ----------
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: Dreiweichen-debug-apk
          path: app/build/outputs/apk/debug/*.apk
          retention-days: 14
          if-no-files-found: warn

      - name: Upload Release AAB (unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: Dreiweichen-release-aab-unsigned
          path: app/build/outputs/bundle/release/*.aab
          retention-days: 14
          if-no-files-found: warn

      - name: Upload Release AAB (signed)
        uses: actions/upload-artifact@v4
        with:
          name: Dreiweichen-release-aab-signed
          path: app/build/outputs/bundle/release/app-release-signed.aab
          retention-days: 14
          if-no-files-found: ignore
